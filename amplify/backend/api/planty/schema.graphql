type User @model
  @auth(rules: [{ allow: owner }]) {
  id: ID!
  email: String
  firstName: String
  lastName: String
  profileImg: String
}

type Room @model
  @auth(rules: [{ allow: owner }]) {
  id: ID!
  name: String
  level: Int
}

type Specie @model
  @auth(rules: [{ allow: private }]) {
  id: ID!
  commonName: String
  scientificName: String
}

type Plant @model
  @auth(rules: [{ allow: owner }]) {
  id: ID!
  userId: ID!
  user: User @hasOne(fields: ["userId"])
  specieId: ID!
  specie: Specie @hasOne(fields: ["specieId"])
  name: String!
  image: String
  source: String
  dateBorn: String
  dateNextWater: String
  dateRetired: String
  waterings: [Watering]!
  roomId: ID
  room: Room @hasOne(fields: ["roomId"])
}

type Watering {
  date: String
}

type Subscription {
  onUserChange: User
    @aws_subscribe(mutations: [
      "createUser",
      "updateUser",
      "deleteUser"
    ])
}
